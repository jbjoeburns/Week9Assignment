{"ast":null,"code":"import { writeCookie } from \"../common\";\nimport { getCookie } from '../common';\nexport const loginUser = async (username, email, password, newUser) => {\n  try {\n    const response = await fetch(\"http://localhost:5001/users/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"email\": email,\n        \"password\": password\n      })\n    });\n    const data = await response.json();\n    console.log(data);\n    newUser(data.user.username);\n    writeCookie(\"jwt_token\", data.user.token, 7);\n  } catch (error) {\n    console.log(error);\n    alert(\"Username, email or password is incorrect!\");\n  }\n};\nexport const registerUser = async (username, email, password, newUser) => {\n  try {\n    const response = await fetch(\"http://localhost:5001/users/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"email\": email,\n        \"password\": password\n      })\n    });\n    const data = await response.json();\n    console.log(data);\n    newUser(data.user.username);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const authCheck = async jwtToken => {\n  try {\n    const response = await fetch(\"http://localhost:5001/users/authcheck\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${jwtToken}`\n      }\n    });\n    const responseDatum = await fetch(\"http://localhost:5001/datum/getdatum\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${jwtToken}`\n      }\n    });\n    const data = await response.json();\n    const dataAdditionalInfo = await responseDatum.json();\n    console.log(data);\n    console.log(\"IMPORTANT BELOW\");\n    console.log(dataAdditionalInfo);\n    return data.user;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const detailsCheck = async (jwtToken) => {\n//     try {\n//         const response = await fetch(\"http://localhost:5001/users/getcurrentuser\", {\n//             method: \"GET\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 \"Authorization\": `Bearer ${jwtToken}`\n//             }\n//         })\n//         const currentuser = await response.json()\n//     } catch (error) {\n//         console.log(error)\n//     }\n\n// }\n\nexport const provideDetails = async (realname, address, newUser) => {\n  try {\n    // write route to get user based on username so I can obtain ID\n    let jwt = getCookie(\"jwt_token\");\n    console.log(jwt);\n    const getresponse = await fetch(\"http://localhost:5001/users/getcurrentuser\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${jwt}`\n      }\n    });\n    const getdata = await getresponse.json();\n    console.log(getdata.users.id);\n    const response = await fetch(\"http://localhost:5001/datum/additionaldetails\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"realname\": realname,\n        \"address\": address,\n        \"UserId\": getdata.users.id\n      })\n    });\n    const data = await response.json();\n    console.log(data);\n    // newUser(data.user.username)\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["writeCookie","getCookie","loginUser","username","email","password","newUser","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","user","token","error","alert","registerUser","authCheck","jwtToken","responseDatum","dataAdditionalInfo","provideDetails","realname","address","jwt","getresponse","getdata","users","id"],"sources":["C:/Users/joe-b/Documents/codenation/week9/s1reactapp/src/utils/index.js"],"sourcesContent":["import { writeCookie } from \"../common\";\r\nimport { getCookie } from '../common';\r\n\r\nexport const loginUser = async(username,email,password,newUser)=>{\r\n    try{\r\n        const response = await fetch(\"http://localhost:5001/users/login\",{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"username\": username,\r\n                \"email\": email,\r\n                \"password\": password\r\n            })\r\n        })\r\n        const data = await response.json()\r\n        console.log(data);\r\n        newUser(data.user.username)\r\n        writeCookie(\"jwt_token\", data.user.token, 7)\r\n    } catch (error) {\r\n        console.log(error);\r\n        alert(\"Username, email or password is incorrect!\")\r\n    }\r\n}\r\n\r\nexport const registerUser = async(username,email,password,newUser)=>{\r\n    try{\r\n        const response = await fetch(\"http://localhost:5001/users/register\",{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"username\": username,\r\n                \"email\": email,\r\n                \"password\": password\r\n            })\r\n        })\r\n        const data = await response.json()\r\n        console.log(data);\r\n        newUser(data.user.username)\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const authCheck = async (jwtToken) => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:5001/users/authcheck\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${jwtToken}`\r\n            }\r\n        })\r\n        const responseDatum = await fetch(\"http://localhost:5001/datum/getdatum\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${jwtToken}`\r\n            }\r\n        })\r\n        const data = await response.json()\r\n        const dataAdditionalInfo = await responseDatum.json()\r\n        console.log(data)\r\n        console.log(\"IMPORTANT BELOW\")\r\n        console.log(dataAdditionalInfo)\r\n        return data.user\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n// export const detailsCheck = async (jwtToken) => {\r\n//     try {\r\n//         const response = await fetch(\"http://localhost:5001/users/getcurrentuser\", {\r\n//             method: \"GET\",\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 \"Authorization\": `Bearer ${jwtToken}`\r\n//             }\r\n//         })\r\n//         const currentuser = await response.json()\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//     }\r\n\r\n// }\r\n\r\nexport const provideDetails = async(realname,address,newUser)=>{\r\n    try{\r\n        // write route to get user based on username so I can obtain ID\r\n        let jwt = getCookie(\"jwt_token\")\r\n        console.log(jwt)\r\n        const getresponse = await fetch(\"http://localhost:5001/users/getcurrentuser\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${jwt}`\r\n            }\r\n        })\r\n        const getdata = await getresponse.json()\r\n        console.log(getdata.users.id)\r\n        const response = await fetch(\"http://localhost:5001/datum/additionaldetails\",{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"realname\": realname,\r\n                \"address\": address,\r\n                \"UserId\": getdata.users.id\r\n            })\r\n        })\r\n        const data = await response.json()\r\n        console.log(data);\r\n        // newUser(data.user.username)\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}